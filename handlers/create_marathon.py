from telegram import Update
from telegram.ext import CallbackContext
from telegram.error import BadRequest
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from db.marathon_queries import save_marathon
from db.member_queries import get_member_by_tg_id
from utils.is_admin import is_admin
from datetime import datetime
from utils.send_marathon_announcement import send_marathon_announcement
from telegram.ext import (
  Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, CallbackQueryHandler
)

ASK_GROUP, ASK_NAME, ASK_DATE, ASK_DAYS, ASK_PENALTY, CONFIRM = range(6)

def start_create_marathon(update: Update, context: CallbackContext):
  user_id = update.effective_user.id

  if not is_admin(user_id):
    update.message.reply_text(
      "–£–ø—Å, –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–π–¥–µ—Ç :) –û–±—Ä–∞—Ç–∏—Å—å –∫ @v_vikisa –∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏."
    )
    return ConversationHandler.END

  update.message.reply_text(
    "–°–æ–∑–¥–∞–µ–º –º–∞—Ä–∞—Ñ–æ–Ω\\! –¢—ã –º–æ–∂–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel\\.\n\n"
    "üîó –ü—Ä–∏—à–ª–∏ ID –≥—Ä—É–ø–ø—ã, –≥–¥–µ –∑–∞–ø—É—Å–∫–∞–µ–º –º–∞—Ä–∞—Ñ–æ–Ω\\.\n"
    "–ß—Ç–æ–±—ã –µ–≥–æ —É–∑–Ω–∞—Ç—å, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É `\\/get\\_chat\\_id` –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ\\.",
    parse_mode="MarkdownV2"
  )

  return ASK_GROUP

def handle_group(update: Update, context: CallbackContext):
  group_ref = update.message.text

  try:
    chat = context.bot.get_chat(group_ref)
    context.user_data['group_id'] = chat.id
    context.user_data['group_title'] = chat.title
    update.message.reply_text(f"üìç –ì—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞: {chat.title}\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, –∫–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –º–∞—Ä–∞—Ñ–æ–Ω")
    return ASK_NAME
  except BadRequest:
    update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∏ —É–∫–∞–∑–∞–Ω–∞ –≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞")
    return ASK_GROUP

def handle_name(update: Update, context: CallbackContext):
  context.user_data['marathon_name'] = update.message.text

  today = datetime.today().strftime("%d.%m.%Y")
  update.message.reply_text(
    f"üìÖ –£–∫–∞–∂–∏ –¥–∞—Ç—É —Å—Ç–∞—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥\\.–º–º\\.–≥–≥–≥–≥\n"
    f"–ù–∞–ø—Ä–∏–º–µ—Ä: `{today}`",
    parse_mode="MarkdownV2"
  )
  return ASK_DATE

def handle_date(update: Update, context: CallbackContext):
  context.user_data['start_date'] = update.message.text  # –º–æ–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –ø–æ–∑–∂–µ
  update.message.reply_text("‚åõÔ∏è –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è –º–∞—Ä–∞—Ñ–æ–Ω?")
  return ASK_DAYS

def handle_days(update: Update, context: CallbackContext):
  try:
    days = int(update.message.text)
    context.user_data['days'] = days
  except ValueError:
    update.message.reply_text("‚ùóÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    return ASK_DAYS

  update.message.reply_text("üí∏ –£–∫–∞–∂–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –¥–Ω—è (–≤ —Ä—É–±–ª—è—Ö):")
  return ASK_PENALTY

def handle_confirmation(update: Update, context: CallbackContext):
  query = update.callback_query
  query.answer()

  if query.data == "confirm_marathon":
    try:
      member = get_member_by_tg_id(query.from_user.id)
      if not member:
        query.edit_message_text("üö´ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        return ConversationHandler.END

      marathon_id = save_marathon(
        name=context.user_data['marathon_name'],
        chat_id=context.user_data['group_id'],
        start_date=context.user_data['start_date'],
        duration_days=context.user_data['days'],
        penalty=context.user_data['penalty'],
        created_by=member['id']
      )
      query.edit_message_text("‚úÖ –ú–∞—Ä–∞—Ñ–æ–Ω —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")

      send_marathon_announcement(
        bot=context.bot,
        chat_id=context.user_data['group_id'],
        marathon_id=marathon_id,  # –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –∏–∑ save_marathon()
        name=context.user_data['marathon_name'],
        days=context.user_data['days']
      )
    except Exception as e:
      print(f"[–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ä–∞—Ñ–æ–Ω–∞] {e}")
      query.edit_message_text("üö´ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
  else:
    query.edit_message_text("üö´ –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∞—Ñ–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

  return ConversationHandler.END


def ask_start_date(update: Update, context: CallbackContext):
  today = datetime.today().strftime("%d.%m.%Y")
  update.message.reply_text(
    f"üìÖ –£–∫–∞–∂–∏ –¥–∞—Ç—É —Å—Ç–∞—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–¥–¥\\.–º–º\\.–≥–≥–≥–≥`\n"
    f"–ù–∞–ø—Ä–∏–º–µ—Ä: `{today}`",
    parse_mode="MarkdownV2"
  )
  return ASK_DATE

def handle_penalty(update: Update, context: CallbackContext):
  text = update.message.text

  try:
    penalty = int(text)
    context.user_data['penalty'] = penalty
  except ValueError:
    update.message.reply_text("‚ùóÔ∏è –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –¥–Ω—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    return ASK_PENALTY

  group_title = context.user_data['group_title']
  name = context.user_data['marathon_name']
  start_date = context.user_data['start_date']
  duration = context.user_data['days']
  penalty = context.user_data['penalty']

  summary = (
    f"üìç –ì—Ä—É–ø–ø–∞: {group_title}\n"
    f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
    f"üìÖ –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: {start_date}\n"
    f"üìÜ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –¥–Ω–µ–π\n"
    f"üí∏ –®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –¥–Ω—è: {penalty}‚ÇΩ\n\n"
    f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∞—Ñ–æ–Ω–∞?"
  )

  keyboard = [
    [
      InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_marathon"),
      InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_marathon")
    ]
  ]

  update.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(keyboard))
  return CONFIRM


def cancel(update, context):
  update.message.reply_text("üö´ –û–∫–µ–π, –æ—Ç–º–µ–Ω–∏–ª–∏.")
  return ConversationHandler.END
