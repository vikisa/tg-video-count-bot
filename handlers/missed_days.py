from db.day_results import get_days_with_missing_submissions, get_missed_members_for_day
from db.marathon_members import get_all_members_of_marathon
from db.marathon_queries import get_active_marathon_by_chat
CHAT_ID = int(-1002579802998)
from telegram import Update
from telegram.ext import CallbackContext
from utils.consts import ADMIN_TG_ID

def missed_days_command(update: Update, context: CallbackContext):
  user = update.effective_user
  chat_type = update.effective_chat.type

  if chat_type != "private" or user.id != ADMIN_TG_ID:
    update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–π–¥–µ—Ç")
    return

  try:
    marathon_id = int(context.args[0])
  except ValueError:
    update.message.reply_text("‚ùå ID –º–∞—Ä–∞—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    return

  marathon = get_active_marathon_by_chat(CHAT_ID)
  if not marathon:
    update.message.reply_text("‚ùå –ú–∞—Ä–∞—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return

  members = get_all_members_of_marathon(marathon_id)
  total_members = len(members)
  start_date = marathon["start_date"]
  end_date = marathon["end_date"]
  price = marathon["price"]

  try:
    missing_days = get_days_with_missing_submissions(marathon_id, start_date, end_date, total_members)

    if not missing_days:
      update.message.reply_text("‚úÖ –ù–µ—Ç –¥–Ω–µ–π —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏ ‚Äî –≤—Å–µ –º–æ–ª–æ–¥—Ü—ã!")
      return

    full_text = f"<b>‚ùå –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏</b> ({marathon['name']}):\n\n"

    for day in sorted(missing_days):

      # –ö—Ç–æ –Ω–µ —Å–¥–∞–ª
      missed_members = get_missed_members_for_day(marathon_id, day, members)
      missed_ids = [m["id"] for m in members if f"@{m['username']}" in missed_members or (not m['username'] and f"ID {m['tg_id']}" in missed_members)]
      missed_tg = missed_members

      # –ö—Ç–æ —Å–¥–∞–ª
      sent_count = total_members - len(missed_tg)
      missed_count = len(missed_tg)

      total_due = missed_count * price
      per_person_payment = round(total_due / sent_count, 2) if sent_count > 0 else 0

      date_str = day.strftime('%d.%m.%Y')
      missed_formatted = "\n".join(f"‚Ä¢ {m}" for m in missed_tg)

      full_text += (
        f"<b>{date_str}</b>\n"
        f"‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏–ª–∏: {missed_count}\n"
        f"{missed_formatted if missed_formatted else '‚Äî'}\n"
        f"‚úÖ –°–¥–∞–ª–∏: {sent_count}\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞ –¥–µ–Ω—å: {total_due}‚ÇΩ\n"
        f"üí∏ –í—ã–ø–ª–∞—Ç–∞ –∑–∞ –¥–µ–Ω—å: {per_person_payment}‚ÇΩ\n\n"
      )

    update.message.reply_text(full_text.strip(), parse_mode="HTML")

  except Exception as e:
    update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")